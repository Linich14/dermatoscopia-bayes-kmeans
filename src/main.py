"""
Punto de entrada principal de la aplicaciÃ³n.
Inicializa la interfaz grÃ¡fica, ejecuta el preprocesamiento y la clasificaciÃ³n automÃ¡tica,
y muestra los resultados agregados en la GUI.
"""

# Importaciones necesarias
import sys
import os

# Agregar el directorio padre al path para poder importar mÃ³dulos src
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.preprocesamiento.carga import cargar_imagenes_y_mascaras
from src.preprocesamiento.particion import particionar_datos
from src.estadisticas.estadisticas_rgb import estadisticas_rgb

# Importar la ventana modular (arquitectura MVC)
from src.gui.ventana_modular import VentanaPrincipalModular

ventana_clase = VentanaPrincipalModular
ventana_tipo = "modular (MVC)"
print("âœ… Usando VentanaPrincipalModular - Arquitectura MVC")

def main():
	"""
	Flujo principal del sistema:
	1. Carga y preprocesa todas las imÃ¡genes y mÃ¡scaras
	2. Particiona los datos en entrenamiento, validaciÃ³n y test
	3. Calcula estadÃ­sticas RGB
	4. Muestra la interfaz grÃ¡fica interactiva con clasificador integrado
	"""
	print("ğŸ”„ Cargando y particionando datos...")
	imagenes = cargar_imagenes_y_mascaras()
	train, val, test = particionar_datos(imagenes)
	
	print("ğŸ“Š Calculando estadÃ­sticas RGB...")
	stats = estadisticas_rgb(train)
	
	print(f"ğŸš€ Iniciando interfaz grÃ¡fica {ventana_tipo}...")
	ventana = ventana_clase(stats, train, val, test)
	ventana.mainloop()

if __name__ == "__main__":
	main()

