"""
Ventana principal refactorizada con arquitectura modular.

Esta implementaci√≥n utiliza el patr√≥n MVC y componentes modulares
para una mejor organizaci√≥n y mantenibilidad del c√≥digo.

COMPONENTES PRINCIPALES PARA LOCALIZAR:
- _create_classifier_section(): L√≠nea ~184 - Crea controles del clasificador Bayesiano + PCA
- _train_classifier(): L√≠nea ~326 - Maneja entrenamiento seg√∫n tipo seleccionado
- _compare_rgb_vs_pca(): L√≠nea ~338 - Inicia comparaci√≥n RGB vs PCA
- _toggle_pca_controls(): L√≠nea ~348 - Muestra/oculta controles espec√≠ficos de PCA
- _show_pca_justification(): L√≠nea ~345 - Muestra justificaci√≥n metodol√≥gica

ARQUITECTURA:
- Ventana usa patr√≥n MVC con ClassifierController
- Controles modulares y reutilizables
- Comunicaci√≥n via callbacks para actualizar estado
- Hilos separados para operaciones largas

FLUJO DE USUARIO:
1. Seleccionar √°rea y canal para histogramas
2. Elegir tipo de clasificador (RGB vs PCA)  
3. Configurar criterios (umbral, PCA)
4. Entrenar modelo
5. Evaluar y comparar resultados
"""

import tkinter as tk
from tkinter import ttk
import threading

from .styles import COLORS, STYLES, DESIGN
from .components import RoundedContainer, RoundedButton, ScrollableFrame, StatusIndicator
from .controllers import ClassifierController
from .graficos import mostrar_histograma
from .dialogs import mostrar_dialogo_comparacion
from ..comparadores.comparador_triple import ComparadorTriple, ejecutar_comparacion_rapida


class VentanaPrincipalModular(tk.Tk):
    """
    Ventana principal refactorizada con arquitectura modular.
    
    Utiliza el patr√≥n MVC separando la l√≥gica de presentaci√≥n,
    control y datos en componentes especializados.
    """
    
    def __init__(self, stats_rgb, datos_train=None, datos_val=None, datos_test=None):
        """
        Inicializa la ventana principal.
        
        Args:
            stats_rgb: Estad√≠sticas RGB precalculadas
            datos_train: Datos de entrenamiento (opcional, para comparador triple)
            datos_val: Datos de validaci√≥n (opcional, para comparador triple)
            datos_test: Datos de test (opcional, para comparador triple)
        """
        super().__init__()
        
        # Configuraci√≥n b√°sica
        self.title("Centro M√©dico √ëielol - Sistema de An√°lisis Dermatosc√≥pico")
        self.geometry("1280x900")
        self.configure(**STYLES['root'])
        
        # Datos
        self.stats_rgb = stats_rgb
        self.datos_train = datos_train
        self.datos_val = datos_val
        self.datos_test = datos_test
        
        # Variables de control
        self.area_var = tk.StringVar(value='lesion')
        self.canal_var = tk.StringVar(value='R')
        self.criterio_var = tk.StringVar(value='youden')
        self.usar_pca_var = tk.BooleanVar(value=False)
        self.criterio_pca_var = tk.StringVar(value='varianza')
        
        # Variables de control K-Means
        self.kmeans_caracteristicas_var = tk.StringVar(value='RGB_basico')
        self.kmeans_clusters_var = tk.StringVar(value='2,3,4,5')
        self.kmeans_auto_eval_var = tk.BooleanVar(value=True)
        
        # Variables de control Comparador Triple
        self.comparador_paralelo_var = tk.BooleanVar(value=True)
        self.comparador_metricas_detalladas_var = tk.BooleanVar(value=True)
        self.comparador_triple = None
        self.ultimo_reporte_triple = None
        
        # Controlador
        self.classifier_controller = ClassifierController(self)
        self._setup_controller_callbacks()
        
        # Construir interfaz
        self._create_interface()
        
        # Actualizar histograma inicial
        self.after(100, self.update_histogram)
    
    def _setup_controller_callbacks(self):
        """Configura los callbacks del controlador para actualizar la UI."""
        self.classifier_controller.set_status_callback(self._update_classifier_status)
        self.classifier_controller.set_progress_callback(self._update_progress_display)
    
    def _create_interface(self):
        """Crea la estructura principal de la interfaz."""
        # Header
        self._create_header()
        
        # Contenedor principal
        main_container = tk.Frame(self, **STYLES['root'])
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # Sidebar
        self._create_sidebar(main_container)
        
        # √Årea principal
        self._create_main_area(main_container)
    
    def _create_header(self):
        """Crea la barra superior."""
        header = tk.Frame(self, **STYLES['header'])
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        # T√≠tulo principal centrado
        title = tk.Label(header,
                        text="Centro M√©dico √ëielol - Diagn√≥stico Dermatol√≥gico Asistido",
                        fg='white',
                        bg=COLORS['primary'],
                        font=('Segoe UI', 16, 'bold'))
        title.place(relx=0.5, rely=0.5, anchor='center')
        
        # Subt√≠tulo en la esquina derecha
        subtitle = tk.Label(header,
                          text="Unidad de Dermatolog√≠a",
                          fg='white',
                          bg=COLORS['primary'],
                          font=('Segoe UI', 10))
        subtitle.place(relx=0.98, rely=0.7, anchor='e')
        
        # Informaci√≥n adicional en la esquina izquierda
        info_label = tk.Label(header,
                            text="üè• Sistema de Apoyo Diagn√≥stico",
                            fg='white',
                            bg=COLORS['primary'],
                            font=('Segoe UI', 10))
        info_label.place(relx=0.02, rely=0.7, anchor='w')
    
    def _create_sidebar(self, parent):
        """Crea el panel lateral con controles."""
        # Contenedor principal del sidebar
        sidebar_container = tk.Frame(parent, **STYLES['sidebar'])
        sidebar_container.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)
        sidebar_container.configure(width=DESIGN['sidebar_width'])
        
        # Frame scrollable
        self.sidebar_scroll = ScrollableFrame(sidebar_container)
        self.sidebar_scroll.pack(fill=tk.BOTH, expand=True)
        
        content = self.sidebar_scroll.scrollable_frame
        content.configure(bg=COLORS['background'])
        
        # Secciones del sidebar
        self._create_analysis_section(content)
        self._create_channel_section(content)
        self._create_actions_section(content)
        self._create_classifier_section(content)
        self._create_kmeans_section(content)
        self._create_comparador_triple_section(content)
    
    def _create_analysis_section(self, parent):
        """Crea la secci√≥n de selecci√≥n de √°rea."""
        section_frame = tk.LabelFrame(parent,
                                     text="√Årea de an√°lisis",
                                     bg=COLORS['background'],
                                     fg=COLORS['text'],
                                     font=('Segoe UI', 10, 'bold'),
                                     relief='solid',
                                     borderwidth=1,
                                     highlightbackground=COLORS['border'])
        section_frame.pack(fill=tk.X, padx=5, pady=10)
        
        # Botones de √°rea
        areas = [
            ('sana', 'Piel Sana ‚úÖ', COLORS['success']),
            ('lesion', 'Lesi√≥n ‚ö†Ô∏è', COLORS['primary'])
        ]
        
        for value, text, color in areas:
            btn = RoundedButton(section_frame,
                              text=text,
                              command=lambda v=value: self._select_area(v),
                              background=color,
                              activebackground=COLORS['primary_dark'],
                              width=320,  # Reducido para dar margen
                              height=DESIGN['button_height'],
                              variable=self.area_var,
                              value=value)
            btn.pack(pady=5, padx=20)
    
    def _create_channel_section(self, parent):
        """Crea la secci√≥n de selecci√≥n de canal."""
        section_frame = tk.LabelFrame(parent,
                                     text="Canal de color",
                                     bg=COLORS['background'],
                                     fg=COLORS['text'],
                                     font=('Segoe UI', 10, 'bold'),
                                     relief='solid',
                                     borderwidth=1,
                                     highlightbackground=COLORS['border'])
        section_frame.pack(fill=tk.X, padx=5, pady=10)
        
        # Botones de canal
        channels = [
            ('R', 'üî¥ Rojo', COLORS['primary']),
            ('G', 'üü¢ Verde', COLORS['success']),
            ('B', 'üîµ Azul', COLORS['info'])
        ]
        
        for value, text, color in channels:
            btn = RoundedButton(section_frame,
                              text=text,
                              command=lambda v=value: self._select_channel(v),
                              background=color,
                              activebackground=COLORS['primary_dark'],
                              width=320,  # Reducido para dar margen
                              height=DESIGN['button_height'],
                              variable=self.canal_var,
                              value=value)
            btn.pack(pady=5, padx=20)
    
    def _create_actions_section(self, parent):
        """Crea la secci√≥n de acciones generales."""
        section_frame = tk.LabelFrame(parent,
                                     text="Acciones",
                                     bg=COLORS['background'],
                                     fg=COLORS['text'],
                                     font=('Segoe UI', 10, 'bold'),
                                     relief='solid',
                                     borderwidth=1,
                                     highlightbackground=COLORS['border'])
        section_frame.pack(fill=tk.X, padx=5, pady=10)
        
        reset_btn = RoundedButton(section_frame,
                                text="üîÑ Reiniciar",
                                command=self._reset_values,
                                background=COLORS['secondary'],
                                width=320,
                                height=35)
        reset_btn.pack(pady=5, padx=20)
    
    def _create_classifier_section(self, parent):
        """
        *** SECCI√ìN PRINCIPAL DEL CLASIFICADOR ***
        Localizaci√≥n: L√≠nea ~184 del archivo ventana_modular.py
        
        PROP√ìSITO: Crea todos los controles para configurar y usar el clasificador
        
        CONTROLES INCLUIDOS:
        1. Checkbox para activar/desactivar PCA
        2. Selector de criterio PCA (varianza, codo, discriminativo)
        3. Bot√≥n para ver justificaci√≥n metodol√≥gica PCA
        4. Selector de criterio de umbral (Youden, EER, etc.)
        5. Botones de acci√≥n: entrenar, evaluar, comparar, clasificar
        
        FUNCIONALIDAD DIN√ÅMICA:
        - Controles PCA se muestran/ocultan seg√∫n checkbox
        - Botones se activan/desactivan seg√∫n estado del entrenamiento
        - Indicadores visuales de progreso
        
        RESULTADO: Panel completo para manejo del clasificador Bayesiano + PCA
        
        Crea la secci√≥n del clasificador Bayesiano."""
        section_frame = tk.LabelFrame(parent,
                                     text="Sistema de Diagn√≥stico Bayesiano",
                                     bg=COLORS['background'],
                                     fg=COLORS['text'],
                                     font=('Segoe UI', 10, 'bold'),
                                     relief='solid',
                                     borderwidth=1,
                                     highlightbackground=COLORS['border'])
        section_frame.pack(fill=tk.X, padx=5, pady=10)
        
        # Checkbox para usar PCA
        pca_frame = tk.Frame(section_frame, bg=COLORS['background'])
        pca_frame.pack(fill=tk.X, padx=10, pady=(10, 5))
        
        pca_check = tk.Checkbutton(pca_frame,
                                  text="üî¨ An√°lisis de Componentes Principales (PCA)",
                                  variable=self.usar_pca_var,
                                  command=self._toggle_pca_controls,
                                  font=('Segoe UI', 9, 'bold'),
                                  fg=COLORS['primary'],
                                  bg=COLORS['background'],
                                  selectcolor=COLORS['background'])
        pca_check.pack(anchor='w')
        
        # Frame para controles PCA (inicialmente oculto)
        self.pca_controls_frame = tk.Frame(section_frame, bg=COLORS['accent_light'])
        
        # Criterio PCA
        tk.Label(self.pca_controls_frame,
                text="Criterio selecci√≥n componentes:",
                font=('Segoe UI', 8),
                fg=COLORS['text'],
                bg=COLORS['accent_light']).pack(fill=tk.X, padx=20, pady=(5, 2))
        
        criterio_pca_combo = ttk.Combobox(self.pca_controls_frame,
                                         textvariable=self.criterio_pca_var,
                                         values=['varianza', 'codo', 'discriminativo'],
                                         state='readonly',
                                         font=('Segoe UI', 8),
                                         width=20)
        criterio_pca_combo.pack(padx=20, pady=(0, 5))
        
        # Bot√≥n de justificaci√≥n PCA
        justificar_btn = RoundedButton(self.pca_controls_frame,
                                     text="üìÑ Informaci√≥n Metodol√≥gica",
                                     command=self._show_pca_justification,
                                     background=COLORS['info'],
                                     width=300,
                                     height=25)
        justificar_btn.pack(pady=2, padx=20)
        
        # Selector de criterio de umbral
        tk.Label(section_frame,
                text="Criterio diagn√≥stico:",
                font=('Segoe UI', 9),
                fg=COLORS['text'],
                bg=COLORS['background']).pack(fill=tk.X, padx=20, pady=(10, 5))
        
        criterio_combo = ttk.Combobox(section_frame,
                                     textvariable=self.criterio_var,
                                     values=['youden', 'equal_error', 'prior_balanced'],
                                     state='readonly',
                                     font=('Segoe UI', 9),
                                     width=25)
        criterio_combo.pack(padx=20, pady=(0, 10))
        
        # Indicador de estado
        self.status_indicator = StatusIndicator(section_frame,
                                              bg=COLORS['background'])
        self.status_indicator.pack(fill=tk.X, padx=20, pady=5)
        
        # Texto de progreso
        self.progress_text = tk.Label(section_frame,
                                    text="Sistema listo para entrenamiento",
                                    font=('Segoe UI', 9),
                                    fg=COLORS['text'],
                                    bg=COLORS['background'],
                                    wraplength=180)
        self.progress_text.pack(fill=tk.X, padx=20, pady=5)
        
        # Botones de acci√≥n
        classifier_actions = [
            ("ü§ñ Entrenar", self._train_classifier, COLORS['accent']),
            ("üìä Evaluar", self._evaluate_classifier, COLORS['info']),
            ("üìà An√°lisis ROC", self._analyze_roc, COLORS['primary']),
            ("‚öñÔ∏è Comparar Criterios", self._compare_criteria, COLORS['secondary']),
            ("üÜö RGB vs PCA", self._compare_rgb_vs_pca, COLORS['warning']),
            ("üñºÔ∏è Clasificar Imagen", self._classify_image, COLORS['success'])
        ]
        
        for text, command, color in classifier_actions:
            btn = RoundedButton(section_frame,
                              text=text,
                              command=command,
                              background=color,
                              activebackground=COLORS['primary_dark'],
                              width=320,
                              height=30)
            btn.pack(pady=3, padx=20)
    
    def _create_main_area(self, parent):
        """Crea el √°rea principal para visualizaci√≥n."""
        main_container = RoundedContainer(parent, **STYLES['root'])
        main_container.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Tarjeta para el gr√°fico
        self.graph_card = RoundedContainer(main_container.inner_frame, **STYLES['card'])
        self.graph_card.pack(fill=tk.BOTH, expand=True)
        
        # Frame para el gr√°fico
        self.graph_frame = RoundedContainer(self.graph_card.inner_frame, 
                                          background=COLORS['background'])
        self.graph_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    def _select_area(self, area):
        """Selecciona el √°rea de an√°lisis."""
        self.area_var.set(area)
        self.update_histogram()
    
    def _select_channel(self, channel):
        """Selecciona el canal de color."""
        self.canal_var.set(channel)
        self.update_histogram()
    
    def _reset_values(self):
        """Reinicia todos los valores."""
        self.area_var.set('lesion')
        self.canal_var.set('R')
        self.criterio_var.set('youden')
        self.usar_pca_var.set(False)
        self.criterio_pca_var.set('varianza')
        
        # Reiniciar variables K-Means
        self.kmeans_caracteristicas_var.set('RGB_basico')
        self.kmeans_clusters_var.set('2,3,4,5')
        self.kmeans_auto_eval_var.set(True)
        
        # Reiniciar variables Comparador Triple
        self.comparador_paralelo_var.set(True)
        self.comparador_metricas_detalladas_var.set(True)
        self.comparador_triple = None
        self.ultimo_reporte_triple = None
        
        # Ocultar controles PCA
        self._toggle_pca_controls()
        
        # Reiniciar controlador
        self.classifier_controller.clasificador = None
        self.classifier_controller.entrenado = False
        
        # Actualizar UI
        self.status_indicator.set_state('idle', 'Listo')
        self.progress_text.configure(text="Sistema listo para entrenamiento")
        
        # Actualizar estado del comparador
        if hasattr(self, 'comparador_status'):
            self.comparador_status.set_state('idle', 'Listo')
        if hasattr(self, 'comparador_progress_text'):
            self.comparador_progress_text.configure(text="Sistema listo para an√°lisis comparativo")
        
        self.update_histogram()
        
        print("üîÑ Sistema reiniciado correctamente")
    
    def _train_classifier(self):
        """Inicia el entrenamiento del clasificador."""
        criterio = self.criterio_var.get()
        usar_pca = self.usar_pca_var.get()
        criterio_pca = self.criterio_pca_var.get()
        
        self.classifier_controller.train_classifier(
            criterio, 
            usar_pca=usar_pca, 
            criterio_pca=criterio_pca
        )
    
    def _compare_rgb_vs_pca(self):
        """Compara rendimiento RGB vs PCA."""
        criterio = self.criterio_var.get()
        criterio_pca = self.criterio_pca_var.get()
        self.classifier_controller.compare_rgb_vs_pca(criterio, criterio_pca)
    
    def _show_pca_justification(self):
        """Muestra la justificaci√≥n metodol√≥gica del PCA."""
        self.classifier_controller.show_pca_justification()
    
    def _toggle_pca_controls(self):
        """Muestra/oculta controles espec√≠ficos de PCA."""
        if self.usar_pca_var.get():
            self.pca_controls_frame.pack(fill=tk.X, padx=5, pady=5)
        else:
            self.pca_controls_frame.pack_forget()
    
    def _evaluate_classifier(self):
        """Eval√∫a el clasificador."""
        self.classifier_controller.evaluate_classifier()
    
    def _analyze_roc(self):
        """Ejecuta an√°lisis ROC completo."""
        self.classifier_controller.analyze_roc()
    
    def _compare_criteria(self):
        """Compara criterios de umbral."""
        self.classifier_controller.compare_criteria()
    
    def _classify_image(self):
        """Clasifica una imagen seleccionada."""
        self.classifier_controller.classify_image()
    
    def _create_kmeans_section(self, parent):
        """
        *** SECCI√ìN K-MEANS CLASIFICACI√ìN NO SUPERVISADA ***
        
        Crea controles para configurar y ejecutar an√°lisis K-Means seg√∫n
        los requisitos del proyecto.
        
        FUNCIONALIDAD:
        - Selecci√≥n de combinaci√≥n de caracter√≠sticas
        - Configuraci√≥n de n√∫mero de clusters
        - Evaluaci√≥n autom√°tica de combinaciones
        - Ejecuci√≥n de an√°lisis completo
        - Visualizaci√≥n de resultados
        """
        section_frame = tk.LabelFrame(parent,
                                     text="üéØ K-Means (Clasificaci√≥n No Supervisada)",
                                     bg=COLORS['background'],
                                     fg=COLORS['text'],
                                     font=('Segoe UI', 10, 'bold'),
                                     relief='solid',
                                     borderwidth=1,
                                     highlightbackground=COLORS['border'])
        section_frame.pack(fill=tk.X, padx=5, pady=10)
        

        
        # Selector de tipo de caracter√≠sticas
        tk.Label(section_frame,
                text="Combinaci√≥n de caracter√≠sticas:",
                font=('Segoe UI', 9),
                fg=COLORS['text'],
                bg=COLORS['background']).pack(fill=tk.X, padx=20, pady=(10, 2))
        
        caracteristicas_combo = ttk.Combobox(section_frame,
                                           textvariable=self.kmeans_caracteristicas_var,
                                           values=[
                                               'RGB_basico',
                                               'HSV_Textura', 
                                               'LAB_RGB',
                                               'Completo',
                                               'Textura_Avanzada',
                                               'Auto_Evaluar_Todas'
                                           ],
                                           state='readonly',
                                           font=('Segoe UI', 8),
                                           width=20)
        caracteristicas_combo.pack(padx=20, pady=(0, 5))
        
        # Configuraci√≥n de clusters
        tk.Label(section_frame,
                text="N√∫meros de clusters a probar:",
                font=('Segoe UI', 9),
                fg=COLORS['text'],
                bg=COLORS['background']).pack(fill=tk.X, padx=20, pady=(5, 2))
        
        clusters_entry = tk.Entry(section_frame,
                                 textvariable=self.kmeans_clusters_var,
                                 font=('Segoe UI', 8),
                                 bg=COLORS['card_bg'],
                                 fg=COLORS['text'],
                                 width=15)
        clusters_entry.pack(padx=20, pady=(0, 5))
        
        # Checkbox para evaluaci√≥n autom√°tica
        auto_check = tk.Checkbutton(section_frame,
                                   text="üîç Evaluaci√≥n autom√°tica (recomendado)",
                                   variable=self.kmeans_auto_eval_var,
                                   font=('Segoe UI', 8),
                                   fg=COLORS['text'],
                                   bg=COLORS['background'],
                                   selectcolor=COLORS['background'])
        auto_check.pack(fill=tk.X, padx=20, pady=5)
        
        # Botones de acci√≥n K-Means
        kmeans_actions = [
            ("Ejecutar K-Means", self._execute_kmeans, COLORS['warning']),
            ("Mejor Combinacion", self._show_best_combination, COLORS['success']),
            ("Probar K-Means Elegido", self._test_selected_kmeans, COLORS['primary'])
        ]
        
        for text, command, color in kmeans_actions:
            btn = RoundedButton(section_frame,
                              text=text,
                              command=command,
                              background=color,
                              activebackground=COLORS['primary_dark'],
                              width=320,
                              height=30)
            btn.pack(pady=3, padx=20)
    
    def _create_comparador_triple_section(self, parent):
        """
        *** SECCI√ìN COMPARADOR TRIPLE ***
        
        Crea controles para ejecutar comparaci√≥n simult√°nea de los tres
        clasificadores: RGB Bayesiano, PCA Bayesiano y K-Means.
        
        FUNCIONALIDAD:
        - Configuraci√≥n de ejecuci√≥n paralela
        - Opciones de m√©tricas detalladas
        - Comparaci√≥n completa y r√°pida
        - Visualizaci√≥n de resultados comparativos
        - Ranking autom√°tico de clasificadores
        """
        section_frame = tk.LabelFrame(parent,
                                     text="‚öñÔ∏è Comparador Triple (RGB + PCA + K-Means)",
                                     bg=COLORS['background'],
                                     fg=COLORS['text'],
                                     font=('Segoe UI', 10, 'bold'),
                                     relief='solid',
                                     borderwidth=1,
                                     highlightbackground=COLORS['border'])
        section_frame.pack(fill=tk.X, padx=5, pady=10)
        
        # Descripci√≥n del comparador
        desc_label = tk.Label(section_frame,
                             text="Compare los tres clasificadores simult√°neamente\npara evaluaci√≥n integral de rendimiento",
                             font=('Segoe UI', 8),
                             fg=COLORS['text'],
                             bg=COLORS['background'],
                             justify='center',
                             wraplength=160)
        desc_label.pack(fill=tk.X, padx=20, pady=(10, 5))
        
        # Opciones de configuraci√≥n
        config_frame = tk.Frame(section_frame, bg=COLORS['accent_light'])
        config_frame.pack(fill=tk.X, padx=15, pady=5)
        
        # Checkbox para ejecuci√≥n paralela
        paralelo_check = tk.Checkbutton(config_frame,
                                       text="üöÄ Ejecuci√≥n en paralelo",
                                       variable=self.comparador_paralelo_var,
                                       font=('Segoe UI', 8),
                                       fg=COLORS['text'],
                                       bg=COLORS['accent_light'],
                                       selectcolor=COLORS['accent_light'])
        paralelo_check.pack(fill=tk.X, padx=15, pady=2)
        
        # Checkbox para m√©tricas detalladas
        metricas_check = tk.Checkbutton(config_frame,
                                       text="üìä M√©tricas detalladas",
                                       variable=self.comparador_metricas_detalladas_var,
                                       font=('Segoe UI', 8),
                                       fg=COLORS['text'],
                                       bg=COLORS['accent_light'],
                                       selectcolor=COLORS['accent_light'])
        metricas_check.pack(fill=tk.X, padx=15, pady=2)
        
        # Indicador de progreso para comparador triple
        self.comparador_status = StatusIndicator(section_frame, bg=COLORS['background'])
        self.comparador_status.pack(fill=tk.X, padx=20, pady=5)
        
        # Texto de progreso espec√≠fico para comparador
        self.comparador_progress_text = tk.Label(section_frame,
                                                text="Sistema listo para an√°lisis comparativo",
                                                font=('Segoe UI', 8),
                                                fg=COLORS['text'],
                                                bg=COLORS['background'],
                                                wraplength=160)
        self.comparador_progress_text.pack(fill=tk.X, padx=20, pady=2)
        
        # Botones de acci√≥n del comparador
        comparador_actions = [
            ("üî¨ Comparaci√≥n Completa", self._ejecutar_comparacion_completa, COLORS['primary']),
            ("‚ö° Comparaci√≥n R√°pida", self._ejecutar_comparacion_rapida, COLORS['warning']),
            ("üìà Ver √öltimo Reporte", self._ver_ultimo_reporte, COLORS['info']),
            ("üèÜ Mejor Clasificador", self._mostrar_mejor_clasificador, COLORS['success'])
        ]
        
        for text, command, color in comparador_actions:
            btn = RoundedButton(section_frame,
                              text=text,
                              command=command,
                              background=color,
                              activebackground=COLORS['primary_dark'],
                              width=320,
                              height=30)
            btn.pack(pady=3, padx=20)
    
    def _execute_kmeans(self):
        """Ejecuta el an√°lisis K-Means completo."""
        caracteristicas = self.kmeans_caracteristicas_var.get()
        clusters_str = self.kmeans_clusters_var.get()
        auto_eval = self.kmeans_auto_eval_var.get()
        
        self.classifier_controller.execute_kmeans_analysis(
            caracteristicas, clusters_str, auto_eval
        )
    
    def _show_best_combination(self):
        """Muestra la mejor combinaci√≥n de caracter√≠sticas encontrada."""
        self.classifier_controller.show_best_kmeans_combination()
    
    def _test_selected_kmeans(self):
        """Permite probar el K-Means con la mejor combinaci√≥n en una imagen espec√≠fica."""
        self.classifier_controller.test_selected_kmeans()
    
    # ===== M√âTODOS DEL COMPARADOR TRIPLE =====
    
    def _ejecutar_comparacion_completa(self):
        """Ejecuta comparaci√≥n completa de los tres clasificadores."""
        # Verificar que hay datos disponibles
        if not hasattr(self, 'stats_rgb') or not self.stats_rgb:
            self._update_comparador_status('error', 'Error: No hay datos cargados')
            return
        
        # Verificar que tenemos los datos particionados
        if not self.datos_train or not self.datos_val or not self.datos_test:
            self._update_comparador_status('error', 'Error: No hay datos particionados disponibles')
            return
        
        # Actualizar estado
        self._update_comparador_status('working', 'Iniciando comparaci√≥n completa...')
        self.comparador_progress_text.configure(text="Preparando clasificadores...")
        
        # Crear comparador si no existe
        if not self.comparador_triple:
            self.comparador_triple = ComparadorTriple(
                self.datos_train, 
                self.datos_val, 
                self.datos_test, 
                self.stats_rgb
            )
        
        # Obtener configuraci√≥n
        paralelo = self.comparador_paralelo_var.get()
        metricas_detalladas = self.comparador_metricas_detalladas_var.get()
        
        # Ejecutar en hilo separado
        thread = threading.Thread(
            target=self._ejecutar_comparacion_worker,
            args=(False, paralelo, metricas_detalladas)  # False = no es r√°pida
        )
        thread.daemon = True
        thread.start()
    
    def _ejecutar_comparacion_rapida(self):
        """Ejecuta comparaci√≥n r√°pida de los tres clasificadores."""
        # Verificar que hay datos disponibles
        if not hasattr(self, 'stats_rgb') or not self.stats_rgb:
            self._update_comparador_status('error', 'Error: No hay datos cargados')
            return
        
        # Verificar que tenemos los datos particionados
        if not self.datos_train or not self.datos_val or not self.datos_test:
            self._update_comparador_status('error', 'Error: No hay datos particionados disponibles')
            return
        
        # Actualizar estado
        self._update_comparador_status('working', 'Iniciando comparaci√≥n r√°pida...')
        self.comparador_progress_text.configure(text="Ejecutando evaluaci√≥n b√°sica...")
        
        # Ejecutar en hilo separado
        thread = threading.Thread(
            target=self._ejecutar_comparacion_worker,
            args=(True, True, False)  # True = r√°pida, paralelo=True, metricas=False
        )
        thread.daemon = True
        thread.start()
    
    def _ejecutar_comparacion_worker(self, es_rapida, paralelo, metricas_detalladas):
        """Worker que ejecuta la comparaci√≥n en hilo separado."""
        try:
            # Callback para actualizar progreso
            def callback_progreso(progreso, mensaje):
                self.after(0, lambda: self.comparador_progress_text.configure(text=f"{mensaje} ({progreso:.1f}%)"))
            
            print(f"üîÑ Iniciando comparaci√≥n - R√°pida: {es_rapida}, Paralelo: {paralelo}")
            print(f"üìä Datos disponibles - Train: {len(self.datos_train) if self.datos_train else 0}, Val: {len(self.datos_val) if self.datos_val else 0}, Test: {len(self.datos_test) if self.datos_test else 0}")
            
            if es_rapida:
                # Comparaci√≥n r√°pida usando funci√≥n auxiliar
                print("‚ö° Ejecutando comparaci√≥n r√°pida...")
                reporte = ejecutar_comparacion_rapida(
                    self.datos_train,
                    self.datos_val,
                    self.datos_test,
                    self.stats_rgb
                )
            else:
                # Comparaci√≥n completa - solo pasar usar_paralelismo
                print("üî¨ Ejecutando comparaci√≥n completa...")
                reporte = self.comparador_triple.ejecutar_comparacion_completa(
                    usar_paralelismo=paralelo
                )
            
            print(f"‚úÖ Comparaci√≥n completada. Resultados: {len(reporte.resultados) if reporte.resultados else 0}")
            
            # Guardar reporte
            self.ultimo_reporte_triple = reporte
            
            # Actualizar UI en hilo principal
            self.after(0, lambda: self._mostrar_resultados_comparacion(reporte))
            
        except Exception as e:
            import traceback
            error_msg = f"Error en comparaci√≥n: {str(e)}"
            traceback_str = traceback.format_exc()
            print(f"‚ùå {error_msg}")
            print(f"üìã Traceback:\n{traceback_str}")
            self.after(0, lambda: self._mostrar_error_comparacion(error_msg))
    
    def _convertir_reporte_a_dict(self, reporte):
        """Convierte un ReporteTriple a formato dict para el di√°logo."""
        resultados_dict = {}
        
        for resultado in reporte.resultados:
            nombre = resultado.nombre_clasificador
            resultados_dict[nombre] = {
                'metricas': {
                    'precision': resultado.precision,
                    'recall': resultado.recall,
                    'f1_score': resultado.f1_score,
                    'exactitud': resultado.accuracy,  # Mapear accuracy a exactitud
                    'sensibilidad': resultado.recall,  # Sensibilidad = Recall
                    'especificidad': resultado.precision,  # Aproximaci√≥n usando precision
                    'jaccard': resultado.f1_score * 0.8,  # Aproximaci√≥n del √≠ndice Jaccard
                    'youden': resultado.f1_score  # Usamos F1 como m√©trica principal
                },
                'umbral': 0.5,  # Valor por defecto para compatibilidad
                'tiempo_total': resultado.tiempo_entrenamiento + resultado.tiempo_evaluacion,
                'mejor_imagen': resultado.imagen_mejor,
                'peor_imagen': resultado.imagen_peor,
                'configuracion': resultado.mejor_configuracion,
                'notas': resultado.notas
            }
        
        return resultados_dict

    def _mostrar_resultados_comparacion(self, reporte):
        """Muestra los resultados de la comparaci√≥n en la UI."""
        
        # Verificar que tenemos resultados v√°lidos
        if not reporte.resultados:
            self._update_comparador_status('warning', 'Sin resultados v√°lidos')
            self.comparador_progress_text.configure(text="No se obtuvieron resultados v√°lidos")
            return
        
        # Encontrar el mejor F1-Score
        mejor_resultado = max(reporte.resultados, key=lambda x: x.f1_score) if reporte.resultados else None
        mejor_f1 = mejor_resultado.f1_score if mejor_resultado else 0.0
        
        # Debug: Mostrar m√©tricas de todos los clasificadores
        for resultado in reporte.resultados:
            print(f"  {resultado.nombre_clasificador}: F1={resultado.f1_score:.3f}, Precision={resultado.precision:.3f}, Recall={resultado.recall:.3f}, Accuracy={resultado.accuracy:.3f}")
        
        # Actualizar estado
        self._update_comparador_status('success', 'Comparaci√≥n completada')
        self.comparador_progress_text.configure(text=f"Mejor: {reporte.clasificador_ganador} (F1: {mejor_f1:.3f})")
        
        # Mostrar di√°logo con resultados
        try:
            resultados_dict = self._convertir_reporte_a_dict(reporte)
            dialogo = mostrar_dialogo_comparacion(self, resultados_dict, "Resultados de Comparaci√≥n Triple")
            
        except Exception as e:
            import traceback
            print(f"‚ö†Ô∏è Error mostrando di√°logo: {e}")
            print(f"Traceback: {traceback.format_exc()}")
        
        print(f"üèÜ Comparaci√≥n completada. Mejor clasificador: {reporte.clasificador_ganador}")
        print(f"üìä F1-Score: {mejor_f1:.3f}")
        print(f"‚è±Ô∏è Tiempo total: {reporte.tiempo_total:.2f}s")
    
    def _mostrar_error_comparacion(self, mensaje):
        """Muestra un error de comparaci√≥n."""
        from tkinter import messagebox
        
        self._update_comparador_status('error', 'Error en comparaci√≥n')
        self.comparador_progress_text.configure(text="Error - Ver detalles")
        
        messagebox.showerror("Error de Comparaci√≥n", mensaje)
        print(f"‚ùå Error en comparaci√≥n: {mensaje}")
    
    def _ver_ultimo_reporte(self):
        """Muestra el √∫ltimo reporte de comparaci√≥n generado."""
        if self.ultimo_reporte_triple:
            resultados_dict = self._convertir_reporte_a_dict(self.ultimo_reporte_triple)
            mostrar_dialogo_comparacion(self, resultados_dict, "√öltimo Reporte de Comparaci√≥n")
        else:
            from tkinter import messagebox
            messagebox.showinfo("Sin Reportes", "No hay reportes de comparaci√≥n disponibles.\nEjecute una comparaci√≥n primero.")
    
    def _mostrar_mejor_clasificador(self):
        """Muestra informaci√≥n del mejor clasificador encontrado."""
        if self.ultimo_reporte_triple:
            from tkinter import messagebox
            
            reporte = self.ultimo_reporte_triple
            
            # Obtener informaci√≥n del mejor clasificador
            mejor_nombre = reporte.clasificador_ganador
            tiempo = reporte.tiempo_total
            
            # Encontrar el mejor F1-Score
            mejor_resultado = max(reporte.resultados, key=lambda x: x.f1_score) if reporte.resultados else None
            mejor_f1 = mejor_resultado.f1_score if mejor_resultado else 0.0
            
            mensaje = f"""üèÜ MEJOR CLASIFICADOR ENCONTRADO:

üìä Clasificador: {mejor_nombre}
üéØ F1-Score: {mejor_f1:.3f}
‚è±Ô∏è Tiempo total: {tiempo:.2f}s

üèÖ RANKING COMPLETO:"""
            
            # Crear ranking con F1-Scores
            ranking_con_scores = []
            for nombre_clasificador in reporte.ranking:
                resultado = next((r for r in reporte.resultados if r.nombre_clasificador == nombre_clasificador), None)
                f1_score = resultado.f1_score if resultado else 0.0
                ranking_con_scores.append((nombre_clasificador, f1_score))
            
            for i, (nombre, f1_score) in enumerate(ranking_con_scores, 1):
                mensaje += f"\n{i}. {nombre}: {f1_score:.3f}"
            
            messagebox.showinfo("Mejor Clasificador", mensaje)
            
            messagebox.showinfo("Mejor Clasificador", mensaje)
        else:
            from tkinter import messagebox
            messagebox.showinfo("Sin Resultados", "No hay resultados de comparaci√≥n disponibles.\nEjecute una comparaci√≥n primero.")
    
    def _update_comparador_status(self, state: str, message: str):
        """Actualiza el estado del comparador en la UI."""
        self.comparador_status.set_state(state, message)
    
    def _mostrar_error_comparacion(self, error_msg: str):
        """Muestra un error de comparaci√≥n en la UI."""
        print(f"‚ùå Error en comparaci√≥n: {error_msg}")
        self._update_comparador_status('error', 'Error en comparaci√≥n')
        self.comparador_progress_text.configure(text="Error - Ver consola para detalles")
        
        # Tambi√©n mostrar en un di√°logo
        from tkinter import messagebox
        messagebox.showerror("Error en Comparaci√≥n", f"Error ejecutando comparaci√≥n:\n\n{error_msg}")
    
    def _update_classifier_status(self, state: str, message: str):
        """Actualiza el estado del clasificador en la UI."""
        self.status_indicator.set_state(state, message)
    
    def _update_progress_display(self, message: str):
        """Actualiza el texto de progreso."""
        self.progress_text.configure(text=message)
    
    def update_histogram(self):
        """Actualiza el histograma usando la funci√≥n modular de graficos.py."""
        try:
            # Obtener datos actuales
            area = self.area_var.get()
            canal = self.canal_var.get()
            datos = self.stats_rgb[area][canal]
            
            # Usar la funci√≥n modular existente
            mostrar_histograma(self.graph_frame.inner_frame, datos, area, canal)
            
        except Exception as e:
            print(f"Error actualizando histograma: {e}")
            # Limpiar el frame en caso de error
            for widget in self.graph_frame.inner_frame.winfo_children():
                widget.destroy()
            # Mostrar mensaje de error
            error_label = tk.Label(self.graph_frame.inner_frame,
                                 text="Error al generar histograma",
                                 font=('Segoe UI', 12),
                                 fg=COLORS['text'],
                                 bg=COLORS['background'])
            error_label.pack(pady=50)


# Alias para compatibilidad
VentanaPrincipal = VentanaPrincipalModular