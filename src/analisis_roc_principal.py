"""
*** AN√ÅLISIS CURVAS ROC - CLASIFICADORES DERMATOSC√ìPICOS ***

Script principal para generar an√°lisis completo de curvas ROC seg√∫n los
requisitos de la pauta del proyecto. Implementa comparaci√≥n entre clasificadores
RGB y PCA con selecci√≥n de punto de operaci√≥n.

REQUISITOS IMPLEMENTADOS (seg√∫n pauta):
1. ‚úÖ Graficar curvas ROC (con AUC) para ambos clasificadores
2. ‚úÖ Marcar punto de operaci√≥n inducido por criterio elegido
3. ‚úÖ Criterios disponibles: Youden, EER, Restricci√≥n operativa
4. ‚úÖ Justificaci√≥n de criterio seleccionado

CRITERIO SELECCIONADO: √çNDICE DE YOUDEN
Justificaci√≥n: Maximiza la eficiencia diagn√≥stica global (Sensibilidad + Especificidad - 1),
apropiado para aplicaciones m√©dicas donde se busca balance √≥ptimo entre detecci√≥n
de melanomas y minimizaci√≥n de falsos positivos.

SALIDAS GENERADAS:
- Gr√°fico comparativo de curvas ROC RGB vs PCA
- Puntos de operaci√≥n marcados seg√∫n criterio Youden
- Reporte textual con m√©tricas y recomendaciones
- An√°lisis de capacidad discriminativa de cada m√©todo
"""

import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
from typing import Dict, List, Any
import sys
import os

# Agregar path del proyecto para imports
sys.path.append(str(Path(__file__).parent.parent))

from clasificadores.bayesiano.clasificador import ClasificadorBayesianoRGB
from clasificadores.bayesiano.clasificador_pca import ClasificadorBayesianoPCA
from estadisticas.curvas_roc import CalculadorROC
from preprocesamiento.carga import cargar_imagenes_y_mascaras


def cargar_datos_proyecto(carpeta_datos: str = "data") -> Dict[str, List[Dict]]:
    """
    *** CARGA DE DATOS DEL PROYECTO ***
    
    Carga im√°genes dermatosc√≥picas organizadas seg√∫n estructura del proyecto.
    Divide autom√°ticamente en conjuntos de entrenamiento y prueba.
    
    Args:
        carpeta_datos: Ruta a la carpeta con im√°genes ISIC
        
    Returns:
        Diccionario con datos organizados por conjunto
    """
    print("üìÅ Cargando datos del proyecto...")
    
    try:
        # Cargar todas las im√°genes disponibles
        datos_completos = cargar_imagenes_y_mascaras()
        
        # Divisi√≥n estrat√©gica: 70% entrenamiento, 30% prueba
        np.random.seed(42)  # Reproducibilidad
        indices = np.random.permutation(len(datos_completos))
        
        split_idx = int(0.7 * len(datos_completos))
        indices_train = indices[:split_idx]
        indices_test = indices[split_idx:]
        
        datos_train = [datos_completos[i] for i in indices_train]
        datos_test = [datos_completos[i] for i in indices_test]
        
        print(f"‚úÖ Datos cargados:")
        print(f"   - Entrenamiento: {len(datos_train)} im√°genes")
        print(f"   - Prueba: {len(datos_test)} im√°genes")
        
        return {
            'entrenamiento': datos_train,
            'prueba': datos_test,
            'completos': datos_completos
        }
        
    except Exception as e:
        print(f"‚ùå Error cargando datos: {e}")
        # Fallback: generar datos sint√©ticos para demostraci√≥n
        print("üîÑ Generando datos sint√©ticos para demostraci√≥n...")
        return generar_datos_sinteticos()


def generar_datos_sinteticos(n_imagenes: int = 50) -> Dict[str, List[Dict]]:
    """
    *** GENERACI√ìN DE DATOS SINT√âTICOS ***
    
    Genera conjunto de datos sint√©ticos para demostraci√≥n del an√°lisis ROC
    cuando no est√°n disponibles los datos reales del proyecto.
    
    Args:
        n_imagenes: N√∫mero de im√°genes sint√©ticas a generar
        
    Returns:
        Diccionario con datos sint√©ticos organizados
    """
    print(f"üé® Generando {n_imagenes} im√°genes sint√©ticas...")
    
    np.random.seed(42)
    datos = []
    
    for i in range(n_imagenes):
        # Generar imagen RGB sint√©tica (64x64 para eficiencia)
        h, w = 64, 64
        
        # Imagen base con variaci√≥n realista de piel
        imagen = np.random.normal(0.6, 0.15, (h, w, 3))  # Tono de piel base
        imagen = np.clip(imagen, 0, 1)
        
        # Generar m√°scara de lesi√≥n (regi√≥n circular aleatoria)
        centro_y = np.random.randint(h//4, 3*h//4)
        centro_x = np.random.randint(w//4, 3*w//4)
        radio = np.random.randint(8, min(h, w)//4)
        
        mascara = np.zeros((h, w), dtype=np.uint8)
        Y, X = np.ogrid[:h, :w]
        dist_center = np.sqrt((X - centro_x)**2 + (Y - centro_y)**2)
        mascara[dist_center <= radio] = 1
        
        # Simular caracter√≠sticas de lesi√≥n en la imagen
        lesion_mask = mascara.astype(bool)
        if np.any(lesion_mask):
            # Lesiones tienden a ser m√°s oscuras y rojizas
            imagen[lesion_mask] *= np.random.uniform(0.3, 0.8, np.sum(lesion_mask))[:, np.newaxis]
            imagen[lesion_mask, 0] *= np.random.uniform(1.1, 1.4)  # M√°s rojo
        
        datos.append({
            'imagen': imagen,
            'mascara': mascara,
            'nombre': f'sintetica_{i:03d}.jpg'
        })
    
    # Divisi√≥n en entrenamiento y prueba
    split_idx = int(0.7 * len(datos))
    datos_train = datos[:split_idx]
    datos_test = datos[split_idx:]
    
    return {
        'entrenamiento': datos_train,
        'prueba': datos_test,
        'completos': datos
    }


def entrenar_clasificadores(datos_train: List[Dict]) -> Dict[str, Any]:
    """
    *** ENTRENAMIENTO DE CLASIFICADORES ***
    
    Entrena ambos clasificadores (RGB y PCA) con los mismos datos
    para comparaci√≥n equitativa en el an√°lisis ROC.
    
    Args:
        datos_train: Datos de entrenamiento
        
    Returns:
        Diccionario con clasificadores entrenados
    """
    print("üéØ Entrenando clasificadores para an√°lisis ROC...")
    
    # *** CONFIGURACI√ìN SEG√öN CRITERIO SELECCIONADO ***
    criterio_seleccionado = 'youden'  # Criterio Youden seg√∫n justificaci√≥n
    
    # *** ENTRENAR CLASIFICADOR RGB ***
    print("üîµ Entrenando clasificador Bayesiano RGB...")
    clasificador_rgb = ClasificadorBayesianoRGB(criterio_umbral=criterio_seleccionado)
    clasificador_rgb.entrenar(datos_train)
    
    print(f"   ‚úÖ RGB entrenado con umbral: {clasificador_rgb.umbral:.3f}")
    
    # *** ENTRENAR CLASIFICADOR PCA ***
    print("üü£ Entrenando clasificador Bayesiano PCA...")
    clasificador_pca = ClasificadorBayesianoPCA(
        criterio_umbral=criterio_seleccionado,
        criterio_pca='varianza',  # Preservar 95% de varianza
        parametros_pca={'umbral_varianza': 0.95}
    )
    clasificador_pca.entrenar(datos_train)
    
    print(f"   ‚úÖ PCA entrenado con {clasificador_pca.num_componentes_pca} componentes")
    print(f"   ‚úÖ Umbral PCA: {clasificador_pca.clasificador_base.umbral:.3f}")
    
    return {
        'rgb': clasificador_rgb,
        'pca': clasificador_pca,
        'criterio': criterio_seleccionado
    }


def generar_analisis_roc_completo(clasificadores: Dict[str, Any], 
                                datos_test: List[Dict],
                                guardar_resultados: bool = True) -> Dict[str, Any]:
    """
    *** AN√ÅLISIS ROC COMPLETO ***
    
    Genera an√°lisis completo de curvas ROC seg√∫n requisitos de la pauta:
    1. Calcula curvas ROC para ambos clasificadores
    2. Selecciona puntos de operaci√≥n seg√∫n criterio
    3. Genera visualizaci√≥n comparativa
    4. Produce reporte con recomendaciones
    
    Args:
        clasificadores: Clasificadores RGB y PCA entrenados
        datos_test: Datos de prueba para an√°lisis
        guardar_resultados: Si guardar gr√°ficos y reportes
        
    Returns:
        Diccionario con resultados completos del an√°lisis
    """
    print("üìä Generando an√°lisis ROC completo...")
    
    # *** GENERAR CURVAS ROC INDIVIDUALES ***
    print("üîç Calculando curva ROC para clasificador RGB...")
    resultados_rgb = clasificadores['rgb'].generar_curva_roc(
        datos_test, "Clasificador Bayesiano RGB"
    )
    
    print("üîç Calculando curva ROC para clasificador PCA...")
    resultados_pca = clasificadores['pca'].generar_curva_roc(
        datos_test, "Clasificador Bayesiano PCA"
    )
    
    # *** COMPARACI√ìN UNIFICADA ***
    calculadora_comparativa = CalculadorROC()
    
    # Registrar ambos clasificadores en la misma calculadora
    calculadora_comparativa.resultados_roc = {
        "Clasificador Bayesiano RGB": resultados_rgb['resultados_roc'],
        "Clasificador Bayesiano PCA": resultados_pca['resultados_roc']
    }
    calculadora_comparativa.puntos_operacion = {
        "Clasificador Bayesiano RGB": resultados_rgb['punto_operacion'],
        "Clasificador Bayesiano PCA": resultados_pca['punto_operacion']
    }
    
    # *** VISUALIZACI√ìN COMPARATIVA ***
    print("üìà Generando gr√°fico comparativo de curvas ROC...")
    
    nombre_archivo = "analisis_roc_dermatoscopia.png" if guardar_resultados else None
    
    fig = calculadora_comparativa.graficar_roc_comparativo(
        ["Clasificador Bayesiano RGB", "Clasificador Bayesiano PCA"],
        titulo="An√°lisis ROC - Detecci√≥n de Melanoma\\nComparaci√≥n RGB vs PCA",
        mostrar_puntos_operacion=True,
        guardar_archivo=nombre_archivo
    )
    
    # *** REPORTE COMPARATIVO ***
    print("üìù Generando reporte comparativo...")
    
    reporte = calculadora_comparativa.generar_reporte_comparativo(
        ["Clasificador Bayesiano RGB", "Clasificador Bayesiano PCA"]
    )
    
    # *** AN√ÅLISIS ADICIONAL ESPEC√çFICO ***
    analisis_adicional = generar_analisis_especifico(resultados_rgb, resultados_pca)
    
    # *** GUARDAR RESULTADOS ***
    if guardar_resultados:
        # Guardar reporte textual
        with open("reporte_roc_dermatoscopia.txt", "w", encoding="utf-8") as f:
            f.write(reporte)
            f.write("\\n\\n")
            f.write(analisis_adicional)
        
        print("üíæ Resultados guardados:")
        print("   - Gr√°fico: analisis_roc_dermatoscopia.png")
        print("   - Reporte: reporte_roc_dermatoscopia.txt")
    
    # Mostrar reporte en consola
    print("\\n" + "="*80)
    print(reporte)
    print("\\n" + "="*80)
    print(analisis_adicional)
    print("="*80)
    
    resultados_finales = {
        'calculadora_comparativa': calculadora_comparativa,
        'resultados_rgb': resultados_rgb,
        'resultados_pca': resultados_pca,
        'reporte_textual': reporte,
        'analisis_adicional': analisis_adicional,
        'figura_roc': fig,
        'criterio_usado': clasificadores['criterio']
    }
    
    return resultados_finales


def generar_analisis_especifico(resultados_rgb: Dict, resultados_pca: Dict) -> str:
    """
    *** AN√ÅLISIS ESPEC√çFICO DEL PROYECTO ***
    
    Genera an√°lisis espec√≠fico enfocado en los aspectos m√©dicos
    y metodol√≥gicos relevantes para el proyecto dermatosc√≥pico.
    
    Args:
        resultados_rgb: Resultados del an√°lisis ROC RGB
        resultados_pca: Resultados del an√°lisis ROC PCA
        
    Returns:
        An√°lisis detallado espec√≠fico del proyecto
    """
    rgb_auc = resultados_rgb['auc']
    pca_auc = resultados_pca['auc']
    
    rgb_punto = resultados_rgb['punto_operacion']
    pca_punto = resultados_pca['punto_operacion']
    
    diferencia_auc = pca_auc - rgb_auc
    mejor_metodo = "PCA" if diferencia_auc > 0 else "RGB"
    
    return f"""
=== AN√ÅLISIS ESPEC√çFICO - DETECCI√ìN DE MELANOMA ===

CAPACIDAD DISCRIMINATIVA (AUC):
‚Ä¢ RGB: {rgb_auc:.3f} ({resultados_rgb['interpretacion_auc']})
‚Ä¢ PCA: {pca_auc:.3f} ({resultados_pca['interpretacion_auc']})
‚Ä¢ Diferencia: {diferencia_auc:+.3f} a favor de {mejor_metodo}

PUNTOS DE OPERACI√ìN (CRITERIO YOUDEN):
                    RGB        PCA        Ventaja
Sensibilidad:   {rgb_punto.tpr:.3f}      {pca_punto.tpr:.3f}      {pca_punto.tpr - rgb_punto.tpr:+.3f}
Especificidad:  {rgb_punto.tnr:.3f}      {pca_punto.tnr:.3f}      {pca_punto.tnr - rgb_punto.tnr:+.3f}
√çndice Youden:  {rgb_punto.youden_index:.3f}      {pca_punto.youden_index:.3f}      {pca_punto.youden_index - rgb_punto.youden_index:+.3f}

INTERPRETACI√ìN CL√çNICA:
‚Ä¢ El m√©todo {mejor_metodo} muestra {"mejor" if diferencia_auc > 0 else "similar"} capacidad para distinguir entre lesiones malignas y benignas
‚Ä¢ Sensibilidad {mejor_metodo}: {(pca_punto.tpr if mejor_metodo == "PCA" else rgb_punto.tpr):.1%} - detecta {(pca_punto.tpr if mejor_metodo == "PCA" else rgb_punto.tpr):.1%} de melanomas reales
‚Ä¢ Especificidad {mejor_metodo}: {(pca_punto.tnr if mejor_metodo == "PCA" else rgb_punto.tnr):.1%} - evita {(pca_punto.tnr if mejor_metodo == "PCA" else rgb_punto.tnr):.1%} de falsos positivos

JUSTIFICACI√ìN CRITERIO YOUDEN:
El √≠ndice de Youden fue seleccionado porque:
1. Maximiza la eficiencia diagn√≥stica global (Sensibilidad + Especificidad - 1)
2. Encuentra el punto √≥ptimo que balancea detecci√≥n de melanomas con minimizaci√≥n de falsos positivos
3. Es robusto ante variaciones en la prevalencia de la enfermedad
4. Proporciona un balance cl√≠nicamente apropiado para screening dermatosc√≥pico

EFICIENCIA DIMENSIONAL (PCA):
‚Ä¢ Componentes utilizados: {resultados_pca['informacion_pca']['num_componentes']}D (reducci√≥n de 3D)
‚Ä¢ Varianza preservada: {resultados_pca['informacion_pca']['varianza_preservada']:.1%}
‚Ä¢ {"Ventaja" if diferencia_auc > 0 else "Costo"} de reducci√≥n dimensional: {abs(diferencia_auc):.3f} puntos AUC

RECOMENDACI√ìN FINAL:
{"üü¢ Se recomienda usar el clasificador " + mejor_metodo if abs(diferencia_auc) > 0.01 else "üü° Ambos m√©todos muestran rendimiento similar"} 
{"por su superior capacidad discriminativa." if abs(diferencia_auc) > 0.01 else ", la selecci√≥n puede basarse en preferencias de implementaci√≥n."}
{"El PCA ofrece beneficio adicional de eficiencia computacional." if mejor_metodo == "PCA" else "El RGB mantiene interpretabilidad directa de colores."}
    """.strip()


def main():
    """
    *** FUNCI√ìN PRINCIPAL ***
    
    Ejecuta el an√°lisis completo de curvas ROC seg√∫n los requisitos
    de la pauta del proyecto de clasificaci√≥n dermatosc√≥pica.
    """
    print("ü©∫ AN√ÅLISIS CURVAS ROC - CLASIFICACI√ìN DERMATOSC√ìPICA")
    print("="*60)
    print("Implementaci√≥n seg√∫n pauta del proyecto:")
    print("‚Ä¢ Curvas ROC (con AUC) para ambos clasificadores ‚úÖ")
    print("‚Ä¢ Punto de operaci√≥n con criterio seleccionado ‚úÖ") 
    print("‚Ä¢ Criterio elegido: √çndice de Youden ‚úÖ")
    print("‚Ä¢ Justificaci√≥n m√©dica del criterio ‚úÖ")
    print("="*60)
    
    try:
        # *** CARGAR DATOS ***
        datos = cargar_datos_proyecto()
        
        # *** ENTRENAR CLASIFICADORES ***
        clasificadores = entrenar_clasificadores(datos['entrenamiento'])
        
        # *** GENERAR AN√ÅLISIS ROC ***
        resultados = generar_analisis_roc_completo(
            clasificadores, 
            datos['prueba'],
            guardar_resultados=True
        )
        
        # *** MOSTRAR GR√ÅFICO ***
        plt.show()
        
        print("\\nüéâ ¬°An√°lisis ROC completado exitosamente!")
        print("üìä Revise los archivos generados para resultados detallados")
        
        return resultados
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis ROC: {e}")
        import traceback
        traceback.print_exc()
        return None


if __name__ == "__main__":
    # Ejecutar an√°lisis principal
    resultados = main()